"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const typescript_1 = __importDefault(require("typescript"));
const findCallExpressions_1 = require("./findCallExpressions");
const findFunctionDeclaration_1 = __importDefault(require("./findFunctionDeclaration"));
const findFunctionStatements_1 = __importDefault(require("./findFunctionStatements"));
function recursivelyFindThrowStatements(functions, typeChecker) {
    return loop(Array.isArray(functions) ? functions : [functions], [], []);
    function loop(todos, done, accum) {
        if (todos.length === 0) {
            return accum;
        }
        const [func, ...rest] = todos;
        if (done.includes(func)) {
            return loop(rest, done, accum);
        }
        const allStatements = (0, findFunctionStatements_1.default)(func);
        const throwStatements = allStatements.filter(typescript_1.default.isThrowStatement);
        const dependencies = allStatements
            .flatMap(findCallExpressions_1.findCallExpressionsInStatement)
            .flatMap((callExpr) => (0, findFunctionDeclaration_1.default)(callExpr, typeChecker));
        return loop([...rest, ...dependencies], [...done, func], [...accum, ...throwStatements]);
    }
}
exports.default = recursivelyFindThrowStatements;
