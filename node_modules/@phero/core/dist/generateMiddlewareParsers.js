"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const generateRPCProxy_1 = require("./code-gen/generateRPCProxy");
const generateParserFromModel_1 = __importDefault(require("./code-gen/parsers/generateParserFromModel"));
const generateParserModel_1 = __importDefault(require("./code-gen/parsers/generateParserModel"));
const tsx = __importStar(require("./tsx"));
function generateMiddlewareParsers(serviceName, serviceConfig, typeChecker) {
    var _a;
    const middlewares = (_a = serviceConfig.middleware) !== null && _a !== void 0 ? _a : [];
    return tsx.const({
        name: `service_middlewares_${serviceName}`,
        init: tsx.literal.array(...middlewares.map((middleware) => tsx.literal.array((0, generateRPCProxy_1.generateInlineParser)({
            returnType: tsx.type.any,
            parser: (0, generateParserFromModel_1.default)((0, generateParserModel_1.default)(typeChecker, middleware.paramsType, "data")),
        }), (0, generateRPCProxy_1.generateInlineParser)({
            returnType: tsx.type.any,
            parser: (0, generateParserFromModel_1.default)((0, generateParserModel_1.default)(typeChecker, middleware.contextType, "data")),
        }), middleware.nextType
            ? (0, generateRPCProxy_1.generateInlineParser)({
                returnType: tsx.type.any,
                parser: (0, generateParserFromModel_1.default)((0, generateParserModel_1.default)(typeChecker, middleware.nextType, "data")),
            })
            : tsx.literal.null))),
    });
}
exports.default = generateMiddlewareParsers;
