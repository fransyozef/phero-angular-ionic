"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.statement = exports.property = exports.expression = exports.literal = exports.type = exports.constructor = exports.classDeclaration = exports.exportNamespaceDeclaration = exports.exportDeclaration = exports.importDeclaration = exports.verbatim = exports.namespace = exports.block = exports.param = exports.typeParam = exports.sourceFile = exports.typeAlias = exports.interface = exports.const = exports.arrowFunction = exports.function = void 0;
var functionDeclaration_1 = require("./functionDeclaration");
Object.defineProperty(exports, "function", { enumerable: true, get: function () { return functionDeclaration_1.functionDeclaration; } });
var arrowFunction_1 = require("./arrowFunction");
Object.defineProperty(exports, "arrowFunction", { enumerable: true, get: function () { return arrowFunction_1.arrowFunction; } });
var const_1 = require("./const");
Object.defineProperty(exports, "const", { enumerable: true, get: function () { return const_1.constDeclaration; } });
var interface_1 = require("./interface");
Object.defineProperty(exports, "interface", { enumerable: true, get: function () { return interface_1.interfaceDeclaration; } });
var typeAlias_1 = require("./typeAlias");
Object.defineProperty(exports, "typeAlias", { enumerable: true, get: function () { return typeAlias_1.typeAlias; } });
var sourceFile_1 = require("./sourceFile");
Object.defineProperty(exports, "sourceFile", { enumerable: true, get: function () { return sourceFile_1.sourceFile; } });
var typeParam_1 = require("./typeParam");
Object.defineProperty(exports, "typeParam", { enumerable: true, get: function () { return typeParam_1.typeParam; } });
var param_1 = require("./param");
Object.defineProperty(exports, "param", { enumerable: true, get: function () { return param_1.param; } });
var block_1 = require("./block");
Object.defineProperty(exports, "block", { enumerable: true, get: function () { return block_1.block; } });
var namespace_1 = require("./namespace");
Object.defineProperty(exports, "namespace", { enumerable: true, get: function () { return namespace_1.namespace; } });
var verbatim_1 = require("./verbatim");
Object.defineProperty(exports, "verbatim", { enumerable: true, get: function () { return verbatim_1.verbatim; } });
var importDeclaration_1 = require("./importDeclaration");
Object.defineProperty(exports, "importDeclaration", { enumerable: true, get: function () { return importDeclaration_1.importDeclaration; } });
var exportDeclaration_1 = require("./exportDeclaration");
Object.defineProperty(exports, "exportDeclaration", { enumerable: true, get: function () { return exportDeclaration_1.exportDeclaration; } });
var exportNamespaceDeclaration_1 = require("./exportNamespaceDeclaration");
Object.defineProperty(exports, "exportNamespaceDeclaration", { enumerable: true, get: function () { return exportNamespaceDeclaration_1.exportNamespaceDeclaration; } });
var classDeclaration_1 = require("./classDeclaration");
Object.defineProperty(exports, "classDeclaration", { enumerable: true, get: function () { return classDeclaration_1.classDeclaration; } });
var constructor_1 = require("./constructor");
Object.defineProperty(exports, "constructor", { enumerable: true, get: function () { return constructor_1.constructor; } });
var Type_1 = require("./Type");
Object.defineProperty(exports, "type", { enumerable: true, get: function () { return Type_1.Type; } });
var Literal_1 = require("./Literal");
Object.defineProperty(exports, "literal", { enumerable: true, get: function () { return Literal_1.Literal; } });
var Expression_1 = require("./Expression");
Object.defineProperty(exports, "expression", { enumerable: true, get: function () { return Expression_1.Expression; } });
var Property_1 = require("./Property");
Object.defineProperty(exports, "property", { enumerable: true, get: function () { return Property_1.Property; } });
var Statement_1 = require("./Statement");
Object.defineProperty(exports, "statement", { enumerable: true, get: function () { return Statement_1.Statement; } });
