"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Statement = void 0;
const typescript_1 = __importDefault(require("typescript"));
const block_1 = require("./block");
const const_1 = require("./const");
const for_1 = require("./for");
const switch_1 = require("./switch");
class Statement {
    static if(props) {
        return typescript_1.default.factory.createIfStatement(props.expression, props.then, props.else);
    }
    static try(props) {
        return typescript_1.default.factory.createTryStatement(Array.isArray(props.block)
            ? typescript_1.default.factory.createBlock(props.block)
            : props.block, typescript_1.default.factory.createCatchClause(typescript_1.default.factory.createVariableDeclaration(typescript_1.default.factory.createIdentifier(props.catch.error), undefined, undefined, undefined), props.catch.block
            ? Array.isArray(props.catch.block)
                ? typescript_1.default.factory.createBlock(props.catch.block)
                : props.catch.block
            : typescript_1.default.factory.createBlock([])), Array.isArray(props.finally)
            ? typescript_1.default.factory.createBlock(props.finally)
            : props.finally);
    }
    static return(expression) {
        return typescript_1.default.factory.createReturnStatement(expression);
    }
    static expression(expression) {
        return typescript_1.default.factory.createExpressionStatement(expression);
    }
    static throw(expression) {
        return typescript_1.default.factory.createThrowStatement(expression);
    }
    static get break() {
        return typescript_1.default.factory.createBreakStatement();
    }
}
exports.Statement = Statement;
Statement.block = block_1.block;
Statement.const = const_1.constDeclaration;
Statement.simpleForOver = for_1.simpleForOver;
Statement.switch = switch_1.switchStatement;
