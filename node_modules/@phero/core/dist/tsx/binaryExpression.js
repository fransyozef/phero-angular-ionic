"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.binaryExpression = void 0;
const typescript_1 = __importDefault(require("typescript"));
function binaryExpression(left, op, right) {
    return typescript_1.default.factory.createBinaryExpression(left, generateOperator(op), right);
}
exports.binaryExpression = binaryExpression;
function generateOperator(op) {
    switch (op) {
        case "=":
            return typescript_1.default.factory.createToken(typescript_1.default.SyntaxKind.EqualsToken);
        case "==":
            return typescript_1.default.factory.createToken(typescript_1.default.SyntaxKind.EqualsEqualsToken);
        case "===":
            return typescript_1.default.factory.createToken(typescript_1.default.SyntaxKind.EqualsEqualsEqualsToken);
        case "<=":
            return typescript_1.default.factory.createToken(typescript_1.default.SyntaxKind.LessThanEqualsToken);
        case ">=":
            return typescript_1.default.factory.createToken(typescript_1.default.SyntaxKind.GreaterThanEqualsToken);
        case "!=":
            return typescript_1.default.factory.createToken(typescript_1.default.SyntaxKind.ExclamationEqualsToken);
        case "!==":
            return typescript_1.default.factory.createToken(typescript_1.default.SyntaxKind.ExclamationEqualsEqualsToken);
        case "+":
            return typescript_1.default.factory.createToken(typescript_1.default.SyntaxKind.PlusToken);
        case "-":
            return typescript_1.default.factory.createToken(typescript_1.default.SyntaxKind.MinusToken);
        case "*":
            return typescript_1.default.factory.createToken(typescript_1.default.SyntaxKind.AsteriskToken);
        case "/":
            return typescript_1.default.factory.createToken(typescript_1.default.SyntaxKind.SlashToken);
        case "||":
            return typescript_1.default.factory.createToken(typescript_1.default.SyntaxKind.BarBarToken);
        case "&&":
            return typescript_1.default.factory.createToken(typescript_1.default.SyntaxKind.AmpersandAmpersandToken);
        case "??":
            return typescript_1.default.factory.createToken(typescript_1.default.SyntaxKind.QuestionQuestionToken);
        case "instanceof":
            return typescript_1.default.factory.createToken(typescript_1.default.SyntaxKind.InstanceOfKeyword);
    }
}
