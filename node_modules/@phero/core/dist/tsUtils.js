"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTypeName = exports.getFullyQualifiedNameWithBase = exports.getFullyQualifiedName = exports.getNameAsString = exports.isExternalSourceFile = exports.isExternalTypeNode = exports.isExternalType = exports.isExternalSymbol = exports.isExternalDeclaration = exports.resolveSymbol = exports.getFirstChildOfKind = exports.hasModifier = exports.getChildrenOfKind = void 0;
const typescript_1 = __importDefault(require("typescript"));
const errors_1 = require("./errors");
const tsTestUtils_1 = require("./tsTestUtils");
function getChildrenOfKind(node, kind) {
    const children = node === undefined
        ? []
        : node instanceof Array
            ? node.flatMap((n) => n.getChildren())
            : node.getChildren();
    return children.reduce((result, child) => {
        return child.kind === kind
            ? [...result, child]
            : result;
    }, []);
}
exports.getChildrenOfKind = getChildrenOfKind;
function hasModifier(node, kind) {
    var _a;
    return !!(typescript_1.default.canHaveModifiers(node) &&
        ((_a = typescript_1.default.getModifiers(node)) === null || _a === void 0 ? void 0 : _a.some((m) => m.kind === kind)));
}
exports.hasModifier = hasModifier;
function getFirstChildOfKind(node, kind) {
    const children = node === undefined ? [] : node.getChildren();
    return children.find((child) => child.kind === kind);
}
exports.getFirstChildOfKind = getFirstChildOfKind;
function resolveSymbol(node, typeChecker) {
    const symbol = node && typeChecker.getSymbolAtLocation(node);
    if (symbol &&
        (symbol.flags & typescript_1.default.SymbolFlags.Alias) === typescript_1.default.SymbolFlags.Alias) {
        return typeChecker.getAliasedSymbol(symbol);
    }
    return symbol;
}
exports.resolveSymbol = resolveSymbol;
// TODO use ts.Program API instead:
// isSourceFileFromExternalLibrary(file: SourceFile): boolean;
// isSourceFileDefaultLibrary(file: SourceFile): boolean;
function isExternalDeclaration(declr) {
    return isExternalSourceFile(declr.getSourceFile());
}
exports.isExternalDeclaration = isExternalDeclaration;
function isExternalSymbol(symbol) {
    var _a;
    return !!((_a = symbol === null || symbol === void 0 ? void 0 : symbol.getDeclarations()) === null || _a === void 0 ? void 0 : _a.some(isExternalDeclaration));
}
exports.isExternalSymbol = isExternalSymbol;
function isExternalType(type) {
    return isExternalSymbol(type.symbol);
}
exports.isExternalType = isExternalType;
function isExternalTypeNode(typeNode) {
    return isExternalSourceFile(typeNode.getSourceFile());
}
exports.isExternalTypeNode = isExternalTypeNode;
function isExternalSourceFile(sourceFile) {
    return sourceFile.fileName.includes("node_modules");
}
exports.isExternalSourceFile = isExternalSourceFile;
function getNameAsString(name) {
    if (!name) {
        throw new Error("No name");
    }
    if (typescript_1.default.isIdentifier(name)) {
        return name.text;
    }
    else if (typescript_1.default.isStringLiteral(name)) {
        return name.text;
    }
    else if (typescript_1.default.isNumericLiteral(name)) {
        return name.text;
    }
    else if (typescript_1.default.isQualifiedName(name)) {
        return name.right.text;
    }
    else if (typescript_1.default.isComputedPropertyName(name)) {
        throw new errors_1.ParseError(`S134: No support for computed names ${(0, tsTestUtils_1.printCode)(name)}`, name);
    }
    else if (typescript_1.default.isPrivateIdentifier(name)) {
        throw new errors_1.ParseError(`S135: No support for private names ${(0, tsTestUtils_1.printCode)(name)}`, name);
    }
    else if (typescript_1.default.isBindingName(name)) {
        throw new errors_1.ParseError(`S136: No support for binding names ${(0, tsTestUtils_1.printCode)(name)}`, name);
    }
    throw new errors_1.ParseError("S137: Name not supported", name);
}
exports.getNameAsString = getNameAsString;
function getFullyQualifiedName(typeNode, typeChecker) {
    var _a;
    const type = typeChecker.getTypeFromTypeNode(typeNode);
    const base = cleanUpTypeName(typeChecker.getFullyQualifiedName((_a = type.aliasSymbol) !== null && _a !== void 0 ? _a : type.symbol));
    return getFullyQualifiedNameWithBase(base, typeNode, typeChecker);
}
exports.getFullyQualifiedName = getFullyQualifiedName;
function getFullyQualifiedNameWithBase(base, typeNode, typeChecker) {
    var _a;
    const fullyQualifiedTypeArgs = (_a = typeNode.typeArguments) === null || _a === void 0 ? void 0 : _a.map((typeArg) => typescript_1.default.isTypeReferenceNode(typeArg)
        ? getFullyQualifiedName(typeArg, typeChecker).full
        : typeChecker.typeToString(typeChecker.getTypeFromTypeNode(typeArg), typeArg));
    const typeArgs = fullyQualifiedTypeArgs
        ? `<${fullyQualifiedTypeArgs.join(", ")}>`
        : undefined;
    return {
        base,
        typeArgs,
        full: `${base}${typeArgs !== null && typeArgs !== void 0 ? typeArgs : ""}`,
    };
}
exports.getFullyQualifiedNameWithBase = getFullyQualifiedNameWithBase;
function cleanUpTypeName(typeName) {
    return typeName
        .replace(/^"[^"]+"\./, "") // remove file name
        .replace(/(domain\.)?v_\d+_\d+_\d+\./, ""); // remove version, and domain before it
}
function getTypeName(typeNode) {
    if (typescript_1.default.isTypeReferenceNode(typeNode)) {
        return typescript_1.default.isIdentifier(typeNode.typeName)
            ? typeNode.typeName.text
            : typeNode.typeName.right.text;
    }
}
exports.getTypeName = getTypeName;
