import ts from "typescript";
import { ParsedError } from "./extractErrors/parseThrowStatement";
import { Model, ParsedPheroFunctionDefinition } from "./parsePheroApp/parsePheroApp";
export declare function generateNamespace(name: ts.Identifier, body: ts.Statement[]): ts.ModuleDeclaration;
export declare function generateFunction(func: ParsedPheroFunctionDefinition, refMaker: ReferenceMaker): ts.FunctionDeclaration;
export declare function generateClientFunction(serviceName: string, contextType: ts.TypeNode | undefined, func: ts.FunctionLikeDeclarationBase, refMaker: ReferenceMaker, typeChecker: ts.TypeChecker): ts.PropertyAssignment;
export declare function generateModel(model: Model, refMaker: ReferenceMaker): Model;
export declare function generateErrorClass(error: ParsedError, refMaker: ReferenceMaker): ts.ClassDeclaration;
export declare class ReferenceMaker {
    private readonly domain;
    private readonly typeChecker;
    private readonly sharedDomainName;
    constructor(domain: Model[], typeChecker: ts.TypeChecker, sharedDomainName: ts.EntityName | undefined);
    fromTypeNode(typeNode: ts.TypeReferenceNode): ts.EntityName;
    fromIdentifier(identifier: ts.Identifier): ts.Identifier | ts.PropertyAccessExpression;
}
