"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const typescript_1 = __importDefault(require("typescript"));
const generateParserFromModel_1 = __importDefault(require("./generateParserFromModel"));
const generateParserLib_1 = require("./generateParserLib");
function generateArrayParser(pointer) {
    const itName = typescript_1.default.factory.createIdentifier(`it_${pointer.model.depth}`);
    return typescript_1.default.factory.createIfStatement(generateIsArrayExpression(pointer), (0, generateParserLib_1.generatePushErrorExpressionStatement)(pointer.errorPath, "not an array"), typescript_1.default.factory.createBlock([
        (0, generateParserLib_1.assignDataToResult)(pointer.resultVarExpr, typescript_1.default.factory.createArrayLiteralExpression([], false)),
        typescript_1.default.factory.createForStatement(typescript_1.default.factory.createVariableDeclarationList([
            typescript_1.default.factory.createVariableDeclaration(itName, undefined, undefined, typescript_1.default.factory.createNumericLiteral("0")),
        ], typescript_1.default.NodeFlags.Let), typescript_1.default.factory.createBinaryExpression(itName, typescript_1.default.factory.createToken(typescript_1.default.SyntaxKind.LessThanToken), typescript_1.default.factory.createPropertyAccessExpression(pointer.dataVarExpr, typescript_1.default.factory.createIdentifier("length"))), typescript_1.default.factory.createPostfixUnaryExpression(itName, typescript_1.default.SyntaxKind.PlusPlusToken), (0, generateParserFromModel_1.default)(pointer.model.element, pointer.path)),
    ]));
}
exports.default = generateArrayParser;
function generateIsArrayExpression(pointer) {
    return typescript_1.default.factory.createPrefixUnaryExpression(typescript_1.default.SyntaxKind.ExclamationToken, typescript_1.default.factory.createCallExpression(typescript_1.default.factory.createPropertyAccessExpression(typescript_1.default.factory.createIdentifier("Array"), typescript_1.default.factory.createIdentifier("isArray")), undefined, [pointer.dataVarExpr]));
}
