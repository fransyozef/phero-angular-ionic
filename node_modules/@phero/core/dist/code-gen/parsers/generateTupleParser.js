"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const typescript_1 = __importDefault(require("typescript"));
const generateParserFromModel_1 = __importDefault(require("./generateParserFromModel"));
const generateParserLib_1 = require("./generateParserLib");
function generateTupleParser(pointer) {
    return typescript_1.default.factory.createIfStatement(generateTupleValidator(pointer), (0, generateParserLib_1.generatePushErrorExpressionStatement)(pointer.errorPath, "null or not an object"), typescript_1.default.factory.createBlock([
        (0, generateParserLib_1.assignDataToResult)(pointer.resultVarExpr, typescript_1.default.factory.createArrayLiteralExpression([], false)),
        ...pointer.model.elements.map((element) => (0, generateParserFromModel_1.default)(element, pointer.path)),
    ]));
}
exports.default = generateTupleParser;
function generateTupleValidator(pointer) {
    return typescript_1.default.factory.createBinaryExpression(typescript_1.default.factory.createPrefixUnaryExpression(typescript_1.default.SyntaxKind.ExclamationToken, typescript_1.default.factory.createCallExpression(typescript_1.default.factory.createPropertyAccessExpression(typescript_1.default.factory.createIdentifier("Array"), typescript_1.default.factory.createIdentifier("isArray")), undefined, [pointer.dataVarExpr])), typescript_1.default.factory.createToken(typescript_1.default.SyntaxKind.BarBarToken), typescript_1.default.factory.createBinaryExpression(typescript_1.default.factory.createPropertyAccessExpression(pointer.dataVarExpr, typescript_1.default.factory.createIdentifier("length")), typescript_1.default.factory.createToken(typescript_1.default.SyntaxKind.ExclamationEqualsEqualsToken), typescript_1.default.factory.createNumericLiteral(pointer.model.elements.length)));
}
