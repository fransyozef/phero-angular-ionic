"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const typescript_1 = __importDefault(require("typescript"));
const generateParserModel_1 = require("./generateParserModel");
class Pointer {
    constructor(model, ancestors) {
        this.model = model;
        this.ancestors = ancestors;
        this.path = [];
        this.path = [...ancestors, model];
    }
    get dataVarExpr() {
        return this.generateVarExpr(this.path);
    }
    get parentVarExpr() {
        return this.generateVarExpr(this.ancestors);
    }
    generateVarExpr(path) {
        return typescript_1.default.factory.createIdentifier(path
            .map((element) => {
            switch (element.type) {
                case generateParserModel_1.ParserModelType.Root:
                    return element.name;
                case generateParserModel_1.ParserModelType.Member:
                    return `["${element.name}"]`;
                case generateParserModel_1.ParserModelType.IndexMember:
                    return `[it_${element.depth}]`;
                case generateParserModel_1.ParserModelType.ArrayElement:
                    return `[it_${element.depth}]`;
                case generateParserModel_1.ParserModelType.TupleElement:
                    return `[${element.position}]`;
                default:
                    return "";
            }
        })
            .join(""));
    }
    get resultVarExpr() {
        return typescript_1.default.factory.createIdentifier(this.dataVarExpr.text.replace(/^[^.[]+/, "result"));
    }
    get errorPath() {
        const [head, ...tail] = this.dataVarExpr.text
            // replace ["propName"] with .propName
            .replace(/\["(.+?)"\]+/g, ".$1")
            // split on array indexers
            .split(/\[it_\d+\]/);
        return tail.length
            ? typescript_1.default.factory.createTemplateExpression(typescript_1.default.factory.createTemplateHead(`${head}[`), tail.map((span, i) => typescript_1.default.factory.createTemplateSpan(typescript_1.default.factory.createIdentifier(`it_${i}`), i === tail.length - 1
                ? typescript_1.default.factory.createTemplateTail(`]${span}`)
                : typescript_1.default.factory.createTemplateMiddle(`]${span}[`))))
            : typescript_1.default.factory.createStringLiteral(head);
    }
}
exports.default = Pointer;
