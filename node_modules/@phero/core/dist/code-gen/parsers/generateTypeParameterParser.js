"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const typescript_1 = __importDefault(require("typescript"));
const generateParserFromModel_1 = __importDefault(require("./generateParserFromModel"));
const generateParserLib_1 = require("./generateParserLib");
const generateParserModel_1 = require("./generateParserModel");
const generateReferenceParser_1 = require("./generateReferenceParser");
const tsx = __importStar(require("../../tsx"));
function generateTypeParameterParser(pointer) {
    const tParamName = `t${pointer.model.position}`;
    const tResultName = `${tParamName}_result`;
    return tsx.block(tsx.const({
        name: tResultName,
        init: tsx.expression.call(pointer.model.defaultParser
            ? tsx.expression.parenthesis(tsx.expression.binary(typescript_1.default.factory.createIdentifier(tParamName), "??", (0, generateReferenceParser_1.generateInlineTypeParameterParser)(pointer.model.defaultParser.typeName, (0, generateParserFromModel_1.default)(pointer.model.defaultParser.parser, [
                {
                    type: generateParserModel_1.ParserModelType.Root,
                    name: "data",
                    parser: pointer.model.defaultParser.parser,
                },
            ]))))
            : tsx.expression.identifier(tParamName), { args: [pointer.dataVarExpr] }),
    }), tsx.statement.if({
        expression: tsx.expression.negate(tsx.expression.propertyAccess(tResultName, "ok")),
        // TODO populate the errors with the actual errors
        then: (0, generateParserLib_1.generatePushErrorExpressionStatement)(pointer.errorPath, `not a ${pointer.model.typeName}`),
        else: (0, generateParserLib_1.assignDataToResult)(pointer.resultVarExpr, tsx.expression.propertyAccess(tResultName, "result")),
    }));
}
exports.default = generateTypeParameterParser;
