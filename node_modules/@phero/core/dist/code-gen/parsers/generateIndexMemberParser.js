"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const typescript_1 = __importDefault(require("typescript"));
const generateKeyValidator_1 = require("./generateKeyValidator");
const generateParserFromModel_1 = __importDefault(require("./generateParserFromModel"));
function generateIndexMemberParser(pointer) {
    const valueParser = (0, generateParserFromModel_1.default)(pointer.model.parser, pointer.path);
    const indexMemberParser = generateDynamicMemberLoop(pointer, typescript_1.default.factory.createBlock([]), valueParser);
    if (pointer.model.optional) {
        return typescript_1.default.factory.createIfStatement(typescript_1.default.factory.createBinaryExpression(pointer.dataVarExpr, typescript_1.default.factory.createToken(typescript_1.default.SyntaxKind.ExclamationEqualsEqualsToken), typescript_1.default.factory.createIdentifier("undefined")), indexMemberParser);
    }
    return indexMemberParser;
}
exports.default = generateIndexMemberParser;
function generateDynamicMemberLoop(pointer, keyParser, valueParser) {
    const depth = pointer.model.depth;
    return typescript_1.default.factory.createForStatement(typescript_1.default.factory.createVariableDeclarationList([
        typescript_1.default.factory.createVariableDeclaration(typescript_1.default.factory.createIdentifier(`itk_${depth}`), undefined, undefined, typescript_1.default.factory.createNumericLiteral("0")),
        typescript_1.default.factory.createVariableDeclaration(typescript_1.default.factory.createIdentifier("keys"), undefined, undefined, typescript_1.default.factory.createCallExpression(typescript_1.default.factory.createPropertyAccessExpression(typescript_1.default.factory.createIdentifier("Object"), typescript_1.default.factory.createIdentifier("keys")), undefined, [pointer.parentVarExpr])),
    ], typescript_1.default.NodeFlags.Let), typescript_1.default.factory.createBinaryExpression(typescript_1.default.factory.createIdentifier(`itk_${depth}`), typescript_1.default.factory.createToken(typescript_1.default.SyntaxKind.LessThanToken), typescript_1.default.factory.createPropertyAccessExpression(typescript_1.default.factory.createIdentifier("keys"), typescript_1.default.factory.createIdentifier("length"))), typescript_1.default.factory.createPostfixUnaryExpression(typescript_1.default.factory.createIdentifier(`itk_${depth}`), typescript_1.default.SyntaxKind.PlusPlusToken), typescript_1.default.factory.createBlock([
        typescript_1.default.factory.createVariableStatement(undefined, typescript_1.default.factory.createVariableDeclarationList([
            typescript_1.default.factory.createVariableDeclaration(typescript_1.default.factory.createIdentifier(`it_${pointer.model.depth}`), undefined, undefined, typescript_1.default.factory.createElementAccessExpression(typescript_1.default.factory.createIdentifier("keys"), typescript_1.default.factory.createIdentifier(`itk_${depth}`))),
        ], typescript_1.default.NodeFlags.Const)),
        typescript_1.default.factory.createIfStatement((0, generateKeyValidator_1.generateKeyValidator)(pointer.model.keyParser, typescript_1.default.factory.createIdentifier(`it_${pointer.model.depth}`)), typescript_1.default.factory.createContinueStatement(undefined), valueParser),
    ], true));
}
