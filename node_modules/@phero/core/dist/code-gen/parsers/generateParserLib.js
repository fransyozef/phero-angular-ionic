"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateAnd = exports.generateOr = exports.assignDataToResult = exports.generatePushErrorExpressionStatement = void 0;
const typescript_1 = __importDefault(require("typescript"));
function generatePushErrorExpressionStatement(errorPath, message) {
    return typescript_1.default.factory.createBlock([
        typescript_1.default.factory.createExpressionStatement(typescript_1.default.factory.createCallExpression(typescript_1.default.factory.createPropertyAccessExpression(typescript_1.default.factory.createIdentifier("errors"), typescript_1.default.factory.createIdentifier("push")), undefined, [
            typescript_1.default.factory.createObjectLiteralExpression([
                typescript_1.default.factory.createPropertyAssignment(typescript_1.default.factory.createIdentifier("path"), errorPath),
                typescript_1.default.factory.createPropertyAssignment(typescript_1.default.factory.createIdentifier("message"), typescript_1.default.factory.createNoSubstitutionTemplateLiteral(message)),
            ], true),
        ])),
    ], true);
}
exports.generatePushErrorExpressionStatement = generatePushErrorExpressionStatement;
function assignDataToResult(resultExpr, dataExpr) {
    return typescript_1.default.factory.createExpressionStatement(typescript_1.default.factory.createBinaryExpression(resultExpr, typescript_1.default.factory.createToken(typescript_1.default.SyntaxKind.EqualsToken), dataExpr));
}
exports.assignDataToResult = assignDataToResult;
function generateOr(left, right) {
    if (left.kind === typescript_1.default.SyntaxKind.FalseKeyword) {
        return right;
    }
    return typescript_1.default.factory.createBinaryExpression(typescript_1.default.factory.createParenthesizedExpression(left), typescript_1.default.factory.createToken(typescript_1.default.SyntaxKind.BarBarToken), typescript_1.default.factory.createParenthesizedExpression(right));
}
exports.generateOr = generateOr;
function generateAnd(left, right) {
    if (left.kind === typescript_1.default.SyntaxKind.TrueKeyword) {
        return right;
    }
    return typescript_1.default.factory.createBinaryExpression(typescript_1.default.factory.createParenthesizedExpression(left), typescript_1.default.factory.createToken(typescript_1.default.SyntaxKind.AmpersandAmpersandToken), typescript_1.default.factory.createParenthesizedExpression(right));
}
exports.generateAnd = generateAnd;
