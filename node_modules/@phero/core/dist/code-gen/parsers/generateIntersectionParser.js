"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const typescript_1 = __importDefault(require("typescript"));
const tsx = __importStar(require("../../tsx"));
const generateParserFromModel_1 = __importDefault(require("./generateParserFromModel"));
function generateIntersectionParser(pointer) {
    return typescript_1.default.factory.createBlock([
        tsx.const({
            name: "intersectionResult",
            init: tsx.literal.object(),
            type: tsx.type.any,
        }),
        ...pointer.model.parsers.flatMap((parser) => [
            (0, generateParserFromModel_1.default)(parser, pointer.path),
            tsx.statement.expression(tsx.expression.call(tsx.expression.propertyAccess("Object", "assign"), {
                args: ["intersectionResult", "result"],
            })),
        ]),
        tsx.statement.expression(tsx.expression.binary(tsx.expression.identifier("result"), "=", tsx.expression.identifier("intersectionResult"))),
    ]);
}
exports.default = generateIntersectionParser;
