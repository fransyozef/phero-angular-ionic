"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const typescript_1 = __importDefault(require("typescript"));
const generateParserLib_1 = require("./generateParserLib");
const tsx = __importStar(require("../../tsx"));
function generateDateParser(pointer) {
    return tsx.statement.if({
        expression: generateDateValidator(pointer),
        then: (0, generateParserLib_1.generatePushErrorExpressionStatement)(pointer.errorPath, `is not a Date`),
        else: (0, generateParserLib_1.assignDataToResult)(pointer.resultVarExpr, typescript_1.default.factory.createNewExpression(typescript_1.default.factory.createIdentifier("Date"), undefined, [pointer.dataVarExpr])),
    });
}
exports.default = generateDateParser;
function generateDateValidator(pointer) {
    return tsx.expression.binary(tsx.expression.prefixUnary("!", tsx.expression.parenthesis(typescript_1.default.factory.createBinaryExpression(pointer.dataVarExpr, typescript_1.default.factory.createToken(typescript_1.default.SyntaxKind.InstanceOfKeyword), tsx.expression.identifier("Date")))), "&&", generateDateStringValidator(pointer));
}
function generateDateStringValidator(pointer) {
    return tsx.expression.binary(tsx.expression.binary(tsx.expression.typeof(pointer.dataVarExpr), "!==", tsx.literal.string("string")), "||", tsx.expression.negate(tsx.expression.call(tsx.expression.propertyAccess(pointer.dataVarExpr, "match"), {
        args: [
            tsx.literal.regularExpression(`/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/`),
        ],
    })));
}
