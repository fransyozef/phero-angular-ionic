"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateKeyValidator = void 0;
const typescript_1 = __importDefault(require("typescript"));
const errors_1 = require("../../errors");
const generateParserModel_1 = require("./generateParserModel");
const generateStringParser_1 = require("./generateStringParser");
const Pointer_1 = __importDefault(require("./Pointer"));
function generateKeyValidator(model, keyName) {
    if (model.type === generateParserModel_1.ParserModelType.String) {
        return (0, generateStringParser_1.generateStringValidator)(new Pointer_1.default(model, [
            {
                type: generateParserModel_1.ParserModelType.Root,
                name: keyName.text,
                parser: model,
            },
        ]));
    }
    if (model.type === generateParserModel_1.ParserModelType.Number) {
        return typescript_1.default.factory.createCallExpression(typescript_1.default.factory.createIdentifier("isNaN"), undefined, [
            typescript_1.default.factory.createCallExpression(typescript_1.default.factory.createIdentifier("parseInt"), undefined, [keyName, typescript_1.default.factory.createNumericLiteral("10")]),
        ]);
    }
    if (model.type === generateParserModel_1.ParserModelType.Union) {
        const literalExprs = model.oneOf.reduce((result, element) => element.type === generateParserModel_1.ParserModelType.StringLiteral
            ? [...result, typescript_1.default.factory.createStringLiteral(element.literal)]
            : element.type === generateParserModel_1.ParserModelType.NumberLiteral
                ? [...result, typescript_1.default.factory.createNumericLiteral(element.literal)]
                : result, []);
        return typescript_1.default.factory.createPrefixUnaryExpression(typescript_1.default.SyntaxKind.ExclamationToken, typescript_1.default.factory.createCallExpression(typescript_1.default.factory.createPropertyAccessExpression(typescript_1.default.factory.createArrayLiteralExpression(literalExprs, false), typescript_1.default.factory.createIdentifier("includes")), undefined, [keyName]));
    }
    throw new errors_1.ParseError(`S140: Key parser type "${model.type}" not implemented`, keyName);
}
exports.generateKeyValidator = generateKeyValidator;
