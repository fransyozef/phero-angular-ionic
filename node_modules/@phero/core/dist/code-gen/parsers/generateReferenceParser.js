"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateInlineTypeParameterParser = void 0;
const typescript_1 = __importDefault(require("typescript"));
const generateParserLib_1 = require("./generateParserLib");
const generateParserModel_1 = require("./generateParserModel");
const generateParser_1 = require("./generateParser");
const generateParserFromModel_1 = __importDefault(require("./generateParserFromModel"));
const tsx = __importStar(require("../../tsx"));
function generateReferenceParser(pointer) {
    const parseResultName = `parseResult`;
    return tsx.block(tsx.const({
        name: parseResultName,
        init: generateParserCall(pointer),
    }), tsx.statement.if({
        expression: tsx.expression.negate(tsx.expression.propertyAccess(parseResultName, "ok")),
        // TODO populate the errors with the actual errors
        then: (0, generateParserLib_1.generatePushErrorExpressionStatement)(pointer.errorPath, `not a ${pointer.model.typeName}`),
        else: (0, generateParserLib_1.assignDataToResult)(pointer.resultVarExpr, tsx.expression.propertyAccess(parseResultName, "result")),
    }));
}
exports.default = generateReferenceParser;
function generateParserCall(pointer) {
    var _a, _b;
    if (pointer.model.typeArguments.length === 0) {
        return tsx.expression.call(tsx.expression.propertyAccess(`${pointer.model.baseTypeName}Parser`, "parse"), { args: [pointer.dataVarExpr] });
    }
    else {
        return typescript_1.default.factory.createCallExpression(typescript_1.default.factory.createPropertyAccessExpression(typescript_1.default.factory.createIdentifier(`${pointer.model.baseTypeName}Parser`), typescript_1.default.factory.createIdentifier("parse")), pointer.model.typeArguments.map((typeArg) => {
            var _a, _b;
            return typescript_1.default.factory.createTypeReferenceNode(typescript_1.default.factory.createIdentifier((_b = (_a = typeArg.fullyQualifiedName) === null || _a === void 0 ? void 0 : _a.full) !== null && _b !== void 0 ? _b : typeArg.typeName), undefined);
        }), [
            pointer.dataVarExpr,
            ...((_b = (_a = pointer.model.typeArguments) === null || _a === void 0 ? void 0 : _a.map((param) => {
                var _a, _b, _c, _d;
                return param.parser.type === generateParserModel_1.ParserModelType.TypeParameter
                    ? param.parser.defaultParser
                        ? typescript_1.default.factory.createBinaryExpression(typescript_1.default.factory.createIdentifier(`t${param.parser.position}`), typescript_1.default.factory.createToken(typescript_1.default.SyntaxKind.QuestionQuestionToken), generateInlineTypeParameterParser((_b = (_a = param.fullyQualifiedName) === null || _a === void 0 ? void 0 : _a.full) !== null && _b !== void 0 ? _b : param.typeName, (0, generateParserFromModel_1.default)(param.parser.defaultParser.parser, [
                            {
                                type: generateParserModel_1.ParserModelType.Root,
                                name: "data",
                                parser: param.parser.defaultParser.parser,
                            },
                        ])))
                        : typescript_1.default.factory.createIdentifier(`t${param.parser.position}`)
                    : generateInlineTypeParameterParser((_d = (_c = param.fullyQualifiedName) === null || _c === void 0 ? void 0 : _c.full) !== null && _d !== void 0 ? _d : param.typeName, (0, generateParserFromModel_1.default)(param.parser, [
                        {
                            type: generateParserModel_1.ParserModelType.Root,
                            name: "data",
                            parser: pointer.model,
                        },
                    ]));
            })) !== null && _b !== void 0 ? _b : []),
        ]);
    }
}
function generateInlineTypeParameterParser(returnTypeString, parser) {
    return typescript_1.default.factory.createArrowFunction(undefined, undefined, [
        typescript_1.default.factory.createParameterDeclaration(undefined, undefined, typescript_1.default.factory.createIdentifier("data"), undefined, typescript_1.default.factory.createKeywordTypeNode(typescript_1.default.SyntaxKind.AnyKeyword), undefined),
    ], typescript_1.default.factory.createTypeReferenceNode(typescript_1.default.factory.createIdentifier("ParseResult"), [
        typescript_1.default.factory.createTypeReferenceNode(typescript_1.default.factory.createIdentifier(returnTypeString), undefined),
    ]), typescript_1.default.factory.createToken(typescript_1.default.SyntaxKind.EqualsGreaterThanToken), (0, generateParser_1.generateParserBody)(typescript_1.default.factory.createTypeReferenceNode(returnTypeString), parser));
}
exports.generateInlineTypeParameterParser = generateInlineTypeParameterParser;
