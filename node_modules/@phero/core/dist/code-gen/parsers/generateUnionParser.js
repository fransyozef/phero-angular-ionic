"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const typescript_1 = __importDefault(require("typescript"));
const generateParserFromModel_1 = __importDefault(require("./generateParserFromModel"));
const generateParserLib_1 = require("./generateParserLib");
function generateUnionParser(pointer) {
    const saveErrors = saveErrorsLengthBeforeUnionValidation();
    const errorFallback = (0, generateParserLib_1.generatePushErrorExpressionStatement)(pointer.errorPath, `is none of the options of union`);
    const validateUnionMembers = pointer.model.oneOf.reduceRight((st, element) => {
        return typescript_1.default.factory.createBlock([
            (0, generateParserFromModel_1.default)(element, pointer.path),
            validateOrNext(st),
        ]);
    }, errorFallback);
    return typescript_1.default.factory.createBlock([saveErrors, validateUnionMembers]);
}
exports.default = generateUnionParser;
function saveErrorsLengthBeforeUnionValidation() {
    return typescript_1.default.factory.createVariableStatement(undefined, typescript_1.default.factory.createVariableDeclarationList([
        typescript_1.default.factory.createVariableDeclaration(typescript_1.default.factory.createIdentifier("errLength"), undefined, undefined, typescript_1.default.factory.createPropertyAccessExpression(typescript_1.default.factory.createIdentifier("errors"), typescript_1.default.factory.createIdentifier("length"))),
    ], typescript_1.default.NodeFlags.Const));
}
function validateOrNext(nextValidationStatement) {
    return typescript_1.default.factory.createIfStatement(typescript_1.default.factory.createBinaryExpression(typescript_1.default.factory.createPropertyAccessExpression(typescript_1.default.factory.createIdentifier("errors"), typescript_1.default.factory.createIdentifier("length")), typescript_1.default.factory.createToken(typescript_1.default.SyntaxKind.ExclamationEqualsEqualsToken), typescript_1.default.factory.createIdentifier("errLength")), typescript_1.default.factory.createBlock([resetErrors(), nextValidationStatement]));
}
function resetErrors() {
    return typescript_1.default.factory.createExpressionStatement(typescript_1.default.factory.createCallExpression(typescript_1.default.factory.createPropertyAccessExpression(typescript_1.default.factory.createIdentifier("errors"), typescript_1.default.factory.createIdentifier("splice")), undefined, [
        typescript_1.default.factory.createIdentifier("errLength"),
        typescript_1.default.factory.createBinaryExpression(typescript_1.default.factory.createPropertyAccessExpression(typescript_1.default.factory.createIdentifier("errors"), typescript_1.default.factory.createIdentifier("length")), typescript_1.default.factory.createToken(typescript_1.default.SyntaxKind.MinusToken), typescript_1.default.factory.createIdentifier("errLength")),
    ]));
}
