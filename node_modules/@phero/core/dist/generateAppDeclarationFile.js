"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const typescript_1 = __importDefault(require("typescript"));
const code_gen_lib_1 = require("./code-gen-lib");
const tsx = __importStar(require("./tsx"));
const VirtualCompilerHost_1 = require("./VirtualCompilerHost");
function generateAppDeclarationFile(app, typeChecker) {
    const domainIdentifier = typescript_1.default.factory.createIdentifier("domain");
    const versionIdentifier = typescript_1.default.factory.createIdentifier("v_1_0_0");
    const refMaker = new code_gen_lib_1.ReferenceMaker(app.models, typeChecker, typescript_1.default.factory.createQualifiedName(domainIdentifier, versionIdentifier));
    const namespaceDeclrs = [];
    if (app.models.length || app.errors.length) {
        namespaceDeclrs.push(
        // export namespace domain {
        (0, code_gen_lib_1.generateNamespace)(domainIdentifier, [
            // export namespace v_1_0_0 {
            (0, code_gen_lib_1.generateNamespace)(versionIdentifier, [
                ...app.models.map((m) => 
                // export interface MyModel {
                (0, code_gen_lib_1.generateModel)(m, refMaker)),
                ...app.errors.map((e) => 
                // export class Error {
                (0, code_gen_lib_1.generateErrorClass)(e, refMaker)),
            ]),
        ]));
    }
    const isUsingPheroContext = app.services.some((s) => !!s.config.contextType);
    if (isUsingPheroContext) {
        namespaceDeclrs.push((0, code_gen_lib_1.generateNamespace)(typescript_1.default.factory.createIdentifier("phero"), [
            tsx.typeAlias({
                export: true,
                name: "PheroContext",
                typeParameters: [tsx.typeParam({ name: "T" })],
                type: tsx.type.reference({ name: "T" }),
            }),
        ]));
    }
    for (const service of app.services) {
        namespaceDeclrs.push(
        // export namespace cmsService {
        (0, code_gen_lib_1.generateNamespace)(typescript_1.default.factory.createIdentifier(service.name), [
            // export namespace v_1_0_0 {
            (0, code_gen_lib_1.generateNamespace)(versionIdentifier, [
                // export function myFunction(): Promise<void> {
                ...service.funcs.map((func) => (0, code_gen_lib_1.generateFunction)(func, refMaker)),
            ]),
        ]));
    }
    const vHost = new VirtualCompilerHost_1.VirtualCompilerHost({
        emitDeclarationOnly: true,
    });
    vHost.addFile("api.ts", generateTS(namespaceDeclrs));
    const program = vHost.createProgram("api.ts");
    const emitResult = program.emit();
    if (emitResult.diagnostics.length) {
        console.error("OOPS SOMETHING IS WRONG");
        console.error(generateTS(namespaceDeclrs));
        console.error(emitResult);
    }
    const declrFile = vHost.getFile("api.d.ts");
    if (!declrFile) {
        throw new Error("Can't generate app declaration file");
    }
    return declrFile;
}
exports.default = generateAppDeclarationFile;
function generateTS(nodes) {
    const printer = typescript_1.default.createPrinter({
        newLine: typescript_1.default.NewLineKind.LineFeed,
        removeComments: true,
    });
    const file = typescript_1.default.createSourceFile("api.ts", "", typescript_1.default.ScriptTarget.ES5, false, typescript_1.default.ScriptKind.TS);
    return printer.printList(typescript_1.default.ListFormat.SourceFileStatements, typescript_1.default.factory.createNodeArray(nodes), file);
}
