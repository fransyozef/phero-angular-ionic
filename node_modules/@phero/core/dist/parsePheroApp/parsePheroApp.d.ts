import ts from "typescript";
import { ParsedError } from "../extractErrors/parseThrowStatement";
export interface ParsedPheroApp {
    models: Model[];
    errors: ParsedError[];
    services: ParsedPheroServiceDefinition[];
}
export interface ParsedPheroServiceDefinition {
    name: string;
    models: Model[];
    errors: ParsedError[];
    funcs: ParsedPheroFunctionDefinition[];
    config: ParsedPheroServiceConfig;
}
export declare type Model = ts.InterfaceDeclaration | ts.TypeAliasDeclaration | ts.EnumDeclaration;
export interface ParsedPheroFunctionDefinition {
    name: string;
    actualFunction: ts.FunctionLikeDeclarationBase;
    parameters: ts.ParameterDeclaration[];
    returnType: ts.TypeNode;
    serviceContext?: {
        type: ts.TypeNode;
        paramName?: string;
    };
}
export interface ParsedPheroServiceConfig {
    middleware?: ParsedMiddlewareConfig[];
    contextType?: ts.TypeNode;
}
export interface ParsedMiddlewareConfig {
    paramsType: ts.TypeNode;
    nextType: ts.TypeNode | undefined;
    contextType: ts.TypeNode;
    middleware: ts.FunctionLikeDeclarationBase;
}
export declare function parsePheroApp(pheroSourceFile: ts.SourceFile, typeChecker: ts.TypeChecker): ParsedPheroApp;
