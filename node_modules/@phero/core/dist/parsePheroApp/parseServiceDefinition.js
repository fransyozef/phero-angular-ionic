"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const errors_1 = require("../errors");
const extractErrors_1 = __importDefault(require("../extractErrors/extractErrors"));
const parseModels_1 = __importDefault(require("./parseModels"));
const getCreateServiceCallExpression_1 = __importDefault(require("./getCreateServiceCallExpression"));
const parseContext_1 = require("./parseContext");
const parseFunctionDefinitions_1 = __importDefault(require("./parseFunctionDefinitions"));
const parseServiceConfig_1 = __importDefault(require("./parseServiceConfig"));
function parseServiceDefinition(serviceExport, typeChecker) {
    var _a, _b;
    const serviceName = serviceExport.name.getText();
    // check if the value of the export is a function call to "creatService"
    const createServiceCallExpr = (0, getCreateServiceCallExpression_1.default)(serviceExport, typeChecker);
    if (!createServiceCallExpr) {
        throw new errors_1.ParseError("S127: Cant find service export", serviceExport);
    }
    // parsing arguments of createService
    const [functionDefs, serviceConfig] = createServiceCallExpr.arguments;
    const [parsedServiceConfig, functionDefinitions] = (0, parseContext_1.parseContext)((0, parseServiceConfig_1.default)(serviceConfig, typeChecker), (0, parseFunctionDefinitions_1.default)(functionDefs, typeChecker), typeChecker);
    if (functionDefinitions.length === 0) {
        throw new errors_1.ParseError("S128: Can't find function definitions", functionDefs);
    }
    return {
        name: serviceName,
        funcs: functionDefinitions,
        models: (0, parseModels_1.default)(functionDefinitions, typeChecker),
        errors: (0, extractErrors_1.default)([
            ...functionDefinitions.map((f) => f.actualFunction),
            ...((_b = (_a = parsedServiceConfig.middleware) === null || _a === void 0 ? void 0 : _a.map((m) => m.middleware)) !== null && _b !== void 0 ? _b : []),
        ], typeChecker),
        config: parsedServiceConfig,
    };
}
exports.default = parseServiceDefinition;
