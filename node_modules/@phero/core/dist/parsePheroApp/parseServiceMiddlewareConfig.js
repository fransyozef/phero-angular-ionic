"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const typescript_1 = __importDefault(require("typescript"));
const errors_1 = require("../errors");
const tsUtils_1 = require("../tsUtils");
const tsx = __importStar(require("../tsx"));
function parseServiceMiddlewareConfig(configObject, name, typeChecker) {
    const prop = configObject.properties.find((p) => p.name && (0, tsUtils_1.getNameAsString)(p.name) === name);
    if (!prop) {
        return undefined;
    }
    const middlewareArrayLiteralExpr = (0, tsUtils_1.getFirstChildOfKind)(prop, typescript_1.default.SyntaxKind.ArrayLiteralExpression);
    if (!middlewareArrayLiteralExpr ||
        middlewareArrayLiteralExpr.elements.length === 0) {
        return undefined;
    }
    const functionDeclrs = [];
    for (const middlewareArrayElement of middlewareArrayLiteralExpr.elements) {
        // we need getAliasedSymbol to resolve imports
        const symbol = (0, tsUtils_1.resolveSymbol)(middlewareArrayElement, typeChecker);
        if (symbol === null || symbol === void 0 ? void 0 : symbol.valueDeclaration) {
            if (typescript_1.default.isFunctionDeclaration(symbol.valueDeclaration)) {
                const middleware = symbol.valueDeclaration;
                functionDeclrs.push(parseMiddlewareConfig(middleware));
            }
            else if (typescript_1.default.isVariableDeclaration(symbol.valueDeclaration) &&
                symbol.valueDeclaration.initializer &&
                typescript_1.default.isArrowFunction(symbol.valueDeclaration.initializer)) {
                const middleware = symbol.valueDeclaration.initializer;
                functionDeclrs.push(parseMiddlewareConfig(middleware));
            }
        }
    }
    return functionDeclrs;
}
exports.default = parseServiceMiddlewareConfig;
function parseMiddlewareConfig(middleware) {
    if (middleware.parameters.length !== 3) {
        throw new errors_1.ParseError(`S129: Middleware should have three parameters "(params: PheroParams<P>, ctx: PheroContext<C>, next: PheroNextFunction<T>)"`, middleware);
    }
    const [paramsParam, contextParam, nextParam] = middleware.parameters;
    return {
        paramsType: parseParamsType(paramsParam),
        contextType: parseContextType(contextParam),
        nextType: parseNextType(nextParam),
        middleware,
    };
}
function parseParamsType(paramsParam) {
    var _a, _b;
    const paramsType = paramsParam.type;
    if (!paramsType ||
        !typescript_1.default.isTypeReferenceNode(paramsType) ||
        (0, tsUtils_1.getTypeName)(paramsType) !== "PheroParams") {
        throw new errors_1.ParseError(`S130: Middleware params parameter has no or incorrect type, should be defined like "params: PheroParams<T>"`, paramsParam);
    }
    return (_b = (_a = paramsType.typeArguments) === null || _a === void 0 ? void 0 : _a[0]) !== null && _b !== void 0 ? _b : tsx.literal.type();
}
function parseContextType(contextParam) {
    var _a, _b;
    const contextType = contextParam.type;
    if (!contextType ||
        !typescript_1.default.isTypeReferenceNode(contextType) ||
        (0, tsUtils_1.getTypeName)(contextType) !== "PheroContext") {
        throw new errors_1.ParseError(`S131: Middleware ctx parameter has no or incorrect type, should be defined like "ctx: PheroContext<T>"`, contextParam);
    }
    return (_b = (_a = contextType.typeArguments) === null || _a === void 0 ? void 0 : _a[0]) !== null && _b !== void 0 ? _b : tsx.literal.type();
}
function parseNextType(nextParam) {
    var _a;
    const nextType = nextParam.type;
    if (!nextType ||
        !typescript_1.default.isTypeReferenceNode(nextType) ||
        (0, tsUtils_1.getTypeName)(nextType) !== "PheroNextFunction") {
        throw new errors_1.ParseError(`S132: Middleware next parameter has no or incorrect type, should be defined like "next: PheroNextFunction<T>"`, nextParam);
    }
    return (_a = nextType.typeArguments) === null || _a === void 0 ? void 0 : _a[0];
}
