"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const typescript_1 = __importDefault(require("typescript"));
const parseFunctionDefinition_1 = __importDefault(require("./parseFunctionDefinition"));
const tsUtils_1 = require("../tsUtils");
function parseFunctionDefinitions(node, typeChecker) {
    if (!node) {
        return [];
    }
    if (typescript_1.default.isObjectLiteralExpression(node)) {
        const result = [];
        const propertyAssignments = node.properties;
        for (const propertyAssignment of propertyAssignments) {
            const func = (0, parseFunctionDefinition_1.default)(propertyAssignment, typeChecker);
            result.push(func);
        }
        return result;
    }
    if (typescript_1.default.isIdentifier(node)) {
        const symbol = (0, tsUtils_1.resolveSymbol)(node, typeChecker);
        if (symbol) {
            return parseFunctionDefinitions(symbol.valueDeclaration, typeChecker);
        }
    }
    if (typescript_1.default.isVariableDeclaration(node)) {
        return parseFunctionDefinitions(node.initializer, typeChecker);
    }
    if (typescript_1.default.isPropertyAccessExpression(node)) {
        return parseFunctionDefinitions(node.getLastToken(), typeChecker);
    }
    if (typescript_1.default.isSourceFile(node)) {
        const result = [];
        for (const statement of node.statements) {
            if ((0, tsUtils_1.hasModifier)(statement, typescript_1.default.SyntaxKind.ExportKeyword)) {
                if (typescript_1.default.isVariableStatement(statement)) {
                    for (const varDeclr of statement.declarationList.declarations) {
                        const func = (0, parseFunctionDefinition_1.default)(varDeclr, typeChecker);
                        result.push(func);
                    }
                }
                else {
                    return [];
                }
            }
        }
        return result;
    }
    return [];
}
exports.default = parseFunctionDefinitions;
