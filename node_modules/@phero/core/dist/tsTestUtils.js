"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.printCode = exports.compileProgram = exports.compileStatements = exports.compileStatement = exports.createTestProgram = exports.printPheroApp = void 0;
const typescript_1 = __importDefault(require("typescript"));
const VirtualCompilerHost_1 = require("./VirtualCompilerHost");
function printPheroApp(app) {
    return JSON.stringify({
        services: app.services.map((service) => ({
            name: service.name,
            funcs: service.funcs.map((func) => ({
                name: func.name,
                func: printFunctionDeclaration(func.actualFunction),
            })),
        })),
    }, null, 4);
    function printFunctionDeclaration(func) {
        var _a;
        const funcName = (_a = func.name) === null || _a === void 0 ? void 0 : _a.getText();
        if (!funcName) {
            throw new Error("Func must have name");
        }
        return func.kind === typescript_1.default.SyntaxKind.FunctionDeclaration
            ? `[FunctionDeclaration(${funcName})]`
            : func.kind === typescript_1.default.SyntaxKind.VariableDeclaration
                ? `[VariableDeclaration(${funcName})]`
                : func.kind === typescript_1.default.SyntaxKind.FunctionExpression
                    ? `[FunctionExpression(${funcName})]`
                    : func.kind === typescript_1.default.SyntaxKind.ArrowFunction
                        ? `[ArrowFunction(${funcName})]`
                        : "[UNKNOWN]";
    }
}
exports.printPheroApp = printPheroApp;
function createTestProgram(input) {
    const vHost = new VirtualCompilerHost_1.VirtualCompilerHost();
    if (typeof input === "string") {
        vHost.addFile(`phero.ts`, input);
    }
    else {
        for (const [fileName, content] of Object.entries(input)) {
            vHost.addFile(`${fileName}.ts`, content);
        }
    }
    const program = vHost.createProgram("phero.ts");
    return program;
}
exports.createTestProgram = createTestProgram;
function compileStatement(code, syntaxKind) {
    var _a;
    const prog = createTestProgram(code);
    const statements = (_a = prog.getSourceFile("phero.ts")) === null || _a === void 0 ? void 0 : _a.statements;
    if ((statements === null || statements === void 0 ? void 0 : statements.length) !== 1) {
        throw new Error("Should provide exactly 1 statement");
    }
    const statement = statements[0];
    if (statement.kind !== syntaxKind) {
        throw new Error(`SytaxKind of statement is ${statement.kind}, but ${syntaxKind} was expected`);
    }
    return {
        typeChecker: prog.getTypeChecker(),
        statement: statement,
    };
}
exports.compileStatement = compileStatement;
function compileStatements(code) {
    var _a;
    const prog = createTestProgram(code);
    const statements = (_a = prog.getSourceFile("phero.ts")) === null || _a === void 0 ? void 0 : _a.statements;
    if (!statements || statements.length < 1) {
        throw new Error("Should provide at least 1 statement");
    }
    return {
        typeChecker: prog.getTypeChecker(),
        statements: statements.map((s) => s),
    };
}
exports.compileStatements = compileStatements;
function compileProgram(input) {
    var _a;
    const prog = createTestProgram(input);
    const statements = (_a = prog.getSourceFile("phero.ts")) === null || _a === void 0 ? void 0 : _a.statements;
    if (!statements || statements.length < 1) {
        throw new Error("Should provide at least 1 statement");
    }
    return {
        typeChecker: prog.getTypeChecker(),
        statements: statements.map((s) => s),
    };
}
exports.compileProgram = compileProgram;
const printer = typescript_1.default.createPrinter({
    newLine: typescript_1.default.NewLineKind.LineFeed,
    noEmitHelpers: true,
    removeComments: true,
    omitTrailingSemicolon: false,
});
function printCode(node) {
    const sf = typescript_1.default.createSourceFile("a.ts", "", typescript_1.default.ScriptTarget.ESNext, undefined, typescript_1.default.ScriptKind.TS);
    return printer.printNode(typescript_1.default.EmitHint.Unspecified, node, sf);
}
exports.printCode = printCode;
