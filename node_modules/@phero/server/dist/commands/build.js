"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@phero/core");
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const typescript_1 = __importDefault(require("typescript"));
function buildCommand(command) {
    var _a, _b, _c;
    const projectPath = process.cwd();
    const tsConfigFilePath = typescript_1.default.findConfigFile(projectPath, typescript_1.default.sys.fileExists, "tsconfig.json");
    if (!tsConfigFilePath) {
        throw new core_1.MissingTSConfigFile(projectPath);
    }
    const tsConfig = typescript_1.default.getParsedCommandLineOfConfigFile(tsConfigFilePath, undefined, typescript_1.default.sys);
    if (!tsConfig) {
        throw new Error("Can't parse tsconfig.json");
    }
    const hasES2015 = (_a = tsConfig.options.lib) === null || _a === void 0 ? void 0 : _a.some((lib) => /(es2015$)|(es2015\.d\.ts)|(es2015.promise$)|(es2015\.promise\.d\.ts)/.test(lib.toLowerCase()));
    const hasES5 = (_b = tsConfig.options.lib) === null || _b === void 0 ? void 0 : _b.some((lib) => /(es5$)|(es5\.d\.ts)/.test(lib.toLowerCase()));
    const compilerOpts = {
        ...tsConfig.options,
        // declaration: true,
        // NOTE: we need Promise support in our declaration file. In a normal TS project you would add
        // the "es2015". Because we're implementing a file system here, sort of, we need to set the file
        // name more explicitly. (Implementing our own fileExists makes compilation much much faster.)
        lib: [
            ...((_c = tsConfig.options.lib) !== null && _c !== void 0 ? _c : []),
            // support for Promise
            ...(hasES2015 ? [] : ["lib.es2015.d.ts"]),
            // support for Pick, Omit, and other TS utilities
            ...(hasES5 ? [] : ["lib.es5.d.ts"]),
        ],
        outDir: path_1.default.join(projectPath, ".build"),
        // target: ts.ScriptTarget.ES5,
        // module: ts.ModuleKind.CommonJS,
    };
    const compilerHost = typescript_1.default.createCompilerHost(compilerOpts);
    const program = typescript_1.default.createProgram({
        host: compilerHost,
        options: compilerOpts,
        rootNames: [`${projectPath}/src/phero.ts`],
    });
    const pheroSourceFile = program.getSourceFile(`${projectPath}/src/phero.ts`);
    if (!pheroSourceFile) {
        throw new core_1.MissingPheroFileError(projectPath);
    }
    const typeChecker = program.getTypeChecker();
    const app = (0, core_1.parsePheroApp)(pheroSourceFile, typeChecker);
    const dts = (0, core_1.generateAppDeclarationFile)(app, typeChecker);
    const manifestPath = path_1.default.join(projectPath, "phero-manifest.d.ts");
    fs_1.default.writeFileSync(manifestPath, dts);
}
exports.default = buildCommand;
