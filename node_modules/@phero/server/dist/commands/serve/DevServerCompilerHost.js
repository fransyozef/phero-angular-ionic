"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DevServerCompilerHost = void 0;
const typescript_1 = __importDefault(require("typescript"));
const path_1 = __importDefault(require("path"));
const fs_1 = __importDefault(require("fs"));
class DevServerCompilerHost {
    constructor(opts) {
        this.files = {};
        this.compilerOpts = {
            ...opts,
            declaration: true,
            // NOTE: we need Promise support in our declaration file. In a normal TS project you would add
            // the "es2015". Because we're implementing a file system here, sort of, we need to set the file
            // name more explicitly. (Implementing our own fileExists makes compilation much much faster.)
            lib: [
                // support for Promise
                "lib.es2015.d.ts",
                // support for Pick, Omit, and other TS utilities
                "lib.es5.d.ts",
            ],
            target: typescript_1.default.ScriptTarget.ES2015,
            module: typescript_1.default.ModuleKind.CommonJS,
        };
        const host = typescript_1.default.createCompilerHost(this.compilerOpts);
        host.writeFile = (fileName, contents) => {
            this.files[fileName] = contents;
            fs_1.default.mkdirSync(path_1.default.dirname(fileName), { recursive: true });
            fs_1.default.writeFileSync(fileName, contents, { encoding: "utf-8" });
        };
        const originalReadFile = host.readFile;
        host.readFile = (fileName) => {
            if (this.files[fileName]) {
                return this.files[fileName];
            }
            // Reads the lib files
            return originalReadFile(fileName);
        };
        host.fileExists = (fileName) => {
            return !!this.files[fileName];
        };
        this.host = host;
    }
    addFile(fileName, source) {
        this.files[fileName] = source;
    }
    getFile(fileName) {
        return this.files[fileName];
    }
    createProgram(rootFileNames) {
        return typescript_1.default.createProgram(typeof rootFileNames === "string" ? [rootFileNames] : rootFileNames, this.compilerOpts, this.host);
    }
}
exports.DevServerCompilerHost = DevServerCompilerHost;
