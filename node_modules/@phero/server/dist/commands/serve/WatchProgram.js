"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const typescript_1 = __importDefault(require("typescript"));
const core_1 = require("@phero/core");
const formatHost = {
    getCanonicalFileName: (path) => path,
    getCurrentDirectory: typescript_1.default.sys.getCurrentDirectory,
    getNewLine: () => typescript_1.default.sys.newLine,
};
class WatchProgram {
    constructor(absoluteProjectDir, buildStartCallback, buildSuccessCallback, buildErrorCallback) {
        this.buildStartCallback = buildStartCallback;
        this.buildSuccessCallback = buildSuccessCallback;
        this.buildErrorCallback = buildErrorCallback;
        this.projectDir = absoluteProjectDir;
        const tsConfigFilePath = typescript_1.default.findConfigFile(absoluteProjectDir, typescript_1.default.sys.fileExists, "tsconfig.json");
        if (!tsConfigFilePath) {
            throw new core_1.MissingTSConfigFile(absoluteProjectDir);
        }
        this.tsConfigFilePath = tsConfigFilePath;
    }
    start() {
        const host = typescript_1.default.createWatchCompilerHost(this.tsConfigFilePath, {}, typescript_1.default.sys, typescript_1.default.createSemanticDiagnosticsBuilderProgram, this.reportDiagnostic.bind(this), this.reportWatchStatus.bind(this), {
            excludeFiles: ["phero-manifest.d.ts"],
        });
        this.watchProgram = typescript_1.default.createWatchProgram(host);
        this.watchProgram.getProgram().emit();
        this.onBuildComplete(this.watchProgram.getProgram().getSemanticDiagnostics());
    }
    close() {
        var _a;
        (_a = this.watchProgram) === null || _a === void 0 ? void 0 : _a.close();
    }
    reportDiagnostic(diagnostic) { }
    reportWatchStatus(diagnostic, newLine, options, errorCount) {
        if (this.watchProgram) {
            if (diagnostic.code === 6031 || diagnostic.code === 6032) {
                this.onBuildStart();
            }
            else {
                this.onBuildComplete(this.watchProgram.getProgram().getSemanticDiagnostics());
            }
        }
    }
    onBuildStart() {
        this.buildStartCallback();
    }
    onBuildComplete(diagnostics) {
        const errorDiagnostics = diagnostics.filter((d) => d.category === typescript_1.default.DiagnosticCategory.Error);
        if (errorDiagnostics.length > 0) {
            this.onBuildFailed(errorDiagnostics);
        }
        else {
            this.onBuildSuccess();
        }
    }
    onBuildSuccess() {
        if (!this.watchProgram) {
            throw new Error("WatchProgram not ready");
        }
        const program = this.watchProgram.getProgram();
        // TODO check all root dirs for phero.ts
        const sourceFile = program.getSourceFile(`${this.projectDir}/src/phero.ts`);
        if (!sourceFile) {
            throw new core_1.MissingPheroFileError(this.projectDir);
        }
        this.buildSuccessCallback(sourceFile.getSourceFile(), this.watchProgram.getProgram().getProgram().getTypeChecker());
    }
    onBuildFailed(diagnostics) {
        const errorMessage = typescript_1.default.formatDiagnosticsWithColorAndContext(diagnostics, {
            getCanonicalFileName: (f) => f,
            getCurrentDirectory: () => this.projectDir,
            getNewLine: () => "\n",
        });
        this.buildErrorCallback(errorMessage);
    }
}
exports.default = WatchProgram;
