export declare type PheroServiceFunctions = Record<string, Function>;
export interface PheroServiceDefinition {
    functions: PheroServiceFunctions;
    config: PheroServiceConfig;
}
export declare type PheroParams<T = {}> = Partial<T>;
export declare type PheroContext<T = {}> = T;
export declare type PheroNextFunction<T = void> = T extends void ? () => Promise<void> : (ctx: T) => Promise<void>;
export declare type PheroMiddlewareFunction<P, C, N> = (params: PheroParams<P>, ctx: PheroContext<C>, next: PheroNextFunction<N>) => Promise<void>;
export interface PheroServiceConfig {
    middleware?: PheroMiddlewareFunction<any, any, void>[];
    cors?: PheroCORSConfig;
}
export interface PheroCORSConfig {
    originWhitelist: string[];
}
export declare function createService(functions: PheroServiceFunctions, config?: PheroServiceConfig): PheroServiceDefinition;
