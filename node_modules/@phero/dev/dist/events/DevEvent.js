"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.addDevEventListener = exports.ClientDevEventEmitter = exports.ServerDevEventEmitter = void 0;
const eventsource_1 = __importDefault(require("eventsource"));
const SSE_RESPONSE_HEADER = {
    Connection: "keep-alive",
    "Content-Type": "text/event-stream",
    "Cache-Control": "no-cache",
    "X-Accel-Buffering": "no",
};
// Event emitters
class DevEventEmitter {
    constructor() {
        this.listeners = [];
    }
    shouldRegisterListener(req) {
        var _a;
        return !!((_a = req.headers.accept) === null || _a === void 0 ? void 0 : _a.includes("text/event-stream"));
    }
    registerListener(res) {
        const id = new Date().toISOString();
        const connectedEvent = {
            type: "LISTENER_CONNECTED",
            id,
        };
        this.listeners.push(res);
        res.on("close", () => {
            this.listeners = this.listeners.filter((listener) => listener !== res);
            this.emit({ type: "LISTENER_DISCONNECTED", id });
        });
        res.writeHead(200, SSE_RESPONSE_HEADER);
        res.write("id: " + id + "\n");
        res.write("retry: 2000\n");
        res.write("data: " + JSON.stringify(connectedEvent) + "\n\n");
        this.emitToListeners(connectedEvent, [res]);
        if (this.lastEvent) {
            this.emitToListeners(this.lastEvent, [res]);
        }
    }
    emit(event) {
        this.lastEvent = event;
        this.emitToListeners(event, this.listeners);
    }
    emitToListeners(event, listeners) {
        listeners.forEach((connection) => {
            const id = new Date().toISOString();
            connection.write("id: " + id + "\n");
            connection.write("retry: 2000\n");
            connection.write("data: " + JSON.stringify(event) + "\n\n");
        });
    }
}
class ServerDevEventEmitter extends DevEventEmitter {
}
exports.ServerDevEventEmitter = ServerDevEventEmitter;
class ClientDevEventEmitter extends DevEventEmitter {
}
exports.ClientDevEventEmitter = ClientDevEventEmitter;
// Event listener
// NOTE: The same event could be emitted multiple times
function addDevEventListener(url, onEvent, onOpen, onError) {
    const eventSource = new eventsource_1.default(url);
    eventSource.onopen = () => onOpen();
    eventSource.onerror = (error) => onError(error.message);
    eventSource.onmessage = async (message) => {
        onEvent(JSON.parse(message.data));
    };
    return () => eventSource.close();
}
exports.addDevEventListener = addDevEventListener;
