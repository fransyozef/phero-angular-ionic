/// <reference types="node" />
import http from "http";
declare type DevEventEmitterConnectionEvent = {
    type: "LISTENER_CONNECTED";
    id: string;
} | {
    type: "LISTENER_DISCONNECTED";
    id: string;
};
export declare type ServerDevEventRPC = ServerDevEventRPCStart | ServerDevEventRPCSuccess | ServerDevEventRPCFailedValidationError | ServerDevEventRPCFailedFunctionError | ServerDevEventRPCFailedServerError | ServerDevEventRPCFailedNotFoundError;
export declare type ServerDevEventRPCStart = {
    type: "RPC_START";
    url: string;
    requestId: string;
    dateTime: string;
};
export declare type ServerDevEventRPCSuccess = {
    type: "RPC_SUCCESS";
    url: string;
    requestId: string;
    dateTime: string;
    ms: number;
};
export interface ValidationError {
    path: string;
    message: string;
}
export interface RuntimeError {
    name: string;
    props: Record<string, any>;
    stack: string;
}
export interface ServerError {
    message: string;
    stack: string;
}
export declare type ServerDevEventRPCFailedValidationError = {
    type: "RPC_FAILED_VALIDATION_ERROR";
    url: string;
    requestId: string;
    dateTime: string;
    ms: number;
    errors: ValidationError[];
    input: any;
};
export declare type ServerDevEventRPCFailedFunctionError = {
    type: "RPC_FAILED_FUNCTION_ERROR";
    url: string;
    requestId: string;
    dateTime: string;
    ms: number;
    error: RuntimeError;
};
export declare type ServerDevEventRPCFailedServerError = {
    type: "RPC_FAILED_SERVER_ERROR";
    url: string;
    requestId: string;
    dateTime: string;
    ms: number;
    error: ServerError;
};
export declare type ServerDevEventRPCFailedNotFoundError = {
    type: "RPC_FAILED_NOT_FOUND_ERROR";
    url: string;
    requestId: string;
    dateTime: string;
    ms: number;
};
export declare type ServerDevEvent = DevEventEmitterConnectionEvent | {
    type: "SERVE_INIT";
} | {
    type: "SERVE_READY";
} | {
    type: "BUILD_PROJECT_START";
} | {
    type: "BUILD_PROJECT_SUCCESS";
} | {
    type: "BUILD_PROJECT_FAILED";
    errorMessage: string;
} | {
    type: "BUILD_MANIFEST_START";
} | {
    type: "BUILD_MANIFEST_SUCCESS";
} | {
    type: "BUILD_MANIFEST_FAILED";
    errorMessage: string;
} | {
    type: "BUILD_RPCS_START";
} | {
    type: "BUILD_RPCS_SUCCESS";
} | {
    type: "BUILD_RPCS_FAILED";
    errorMessage: string;
} | ServerDevEventRPCStart | ServerDevEventRPCSuccess | ServerDevEventRPCFailedValidationError | ServerDevEventRPCFailedFunctionError | ServerDevEventRPCFailedServerError | ServerDevEventRPCFailedNotFoundError;
export declare type ClientDevEvent = DevEventEmitterConnectionEvent | {
    type: "WATCH_INIT";
} | {
    type: "WATCH_READY";
} | {
    type: "SERVER_CONNECTED";
} | {
    type: "SERVER_DISCONNECTED";
    errorMessage: string;
} | {
    type: "SERVER_NOT_FOUND";
    errorMessage: string;
} | {
    type: "BUILD_START";
} | {
    type: "BUILD_SUCCESS";
} | {
    type: "BUILD_FAILED";
    errorMessage: string;
};
declare class DevEventEmitter<T extends ServerDevEvent | ClientDevEvent> {
    private lastEvent?;
    listeners: http.ServerResponse[];
    shouldRegisterListener(req: http.IncomingMessage): boolean;
    registerListener(res: http.ServerResponse): void;
    emit(event: DevEventEmitterConnectionEvent | T): void;
    private emitToListeners;
}
export declare class ServerDevEventEmitter extends DevEventEmitter<ServerDevEvent> {
}
export declare class ClientDevEventEmitter extends DevEventEmitter<ClientDevEvent> {
}
export declare function addDevEventListener<T extends ServerDevEvent | ClientDevEvent>(url: string, onEvent: (event: T) => void, onOpen: () => void, onError: (errorMessage: string) => void): () => void;
export {};
